using weka.core;
using weka.classifiers.meta;

namespace Ml2.Clss
{
  /// <summary>
  /// Class for building an ensemble of randomizable base classifiers. Each
  /// base classifiers is built using a different random number seed (but based one
  /// the same data). The final prediction is a straight average of the
  /// predictions generated by the individual base classifiers.
  /// </summary>
  public class RandomCommittee<T> : BaseClassifier<T>
  {
    public RandomCommittee(Runtime<T> rt) : base(rt, new RandomCommittee()) {}

    /// <summary>
    /// The random number seed to be used.
    /// </summary>    
    public RandomCommittee<T> Seed (int value) {
      ((RandomCommittee)Impl).setSeed(value);
      return this;
    }

    /// <summary>
    /// The number of execution slots (threads) to use for constructing the
    /// ensemble.
    /// </summary>    
    public RandomCommittee<T> NumExecutionSlots (int value) {
      ((RandomCommittee)Impl).setNumExecutionSlots(value);
      return this;
    }

    /// <summary>
    /// The number of iterations to be performed.
    /// </summary>    
    public RandomCommittee<T> NumIterations (int value) {
      ((RandomCommittee)Impl).setNumIterations(value);
      return this;
    }

    /// <summary>
    /// The base classifier to be used.
    /// </summary>    
    public RandomCommittee<T> Classifier (Clss.BaseClassifier<T> value) {
      ((RandomCommittee)Impl).setClassifier(value.Impl);
      return this;
    }

    /// <summary>
    /// If set to true, classifier may output additional info to the console.
    /// </summary>    
    public RandomCommittee<T> Debug (bool value) {
      ((RandomCommittee)Impl).setDebug(value);
      return this;
    }

        
        
  }
}